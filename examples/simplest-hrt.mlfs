module M
let x = 1

val x : (forall a. a -> a) -> (i64, str)
let x = fun f -> (f 1, f "")

val z : { i64 -> i64 }
let z = fun v -> v

val k : (forall a. a -> a) -> (i32 -> i32)
let k = extern "..."

val g : (forall a. a) -> (i32 -> i32)
let g = k

val id : forall a. a -> a
let id = fun x -> x

val choose : forall a. a -> a -> a
let choose = fun x -> fun y -> x


val choose_id : (forall a. a) -> (i32 -> i32)
let choose_id =
    // without this intermediate instantiation(choose_id_),
    // MLFS rejects this program
    // val choose_id_ : (forall a. a -> a) -> (i32 -> i32)
    // let choose_id_ = choose id

    // in
    // choose_id_
    choose id