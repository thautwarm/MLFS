module Prim

val unit : Type @unit
let unit = unit

val println : forall a. a -> unit
let println = extern "println"

val op_Element : u64 -> forall a b. a -> b
let op_Element = extern "u -> x -> x[u]"

val op_Make : forall sub maker. {Make (sub, maker)} -> Type sub -> maker
let op_Make = fun f -> fun _ -> coerce f

type A = (a : i64, b : str)
let make = op_Make


let a = make A 1 "2"

let g = a.b

val c : A
let c = make A 1 "2"

val aIsNameSpace : { namespace (A, ("a", "b")) }
let aIsNameSpace = coerce 0

let _ =
    open c in
    println (? b as b)